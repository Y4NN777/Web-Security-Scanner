# Vulnerability data structure
from typing import List, Dict, Any
from datetime import datetime
from collections import defaultdict

class VulnerabilityReport:
    """Container for scan results and vulnerability data"""
    
    def __init__(self, target_url: str = None):
        self.target_url = target_url
        self.start_time = datetime.now()
        self.end_time = None
        self.vulnerabilities: List[Dict[str, Any]] = []
        self.scan_metadata = {
            'scanner_version': '2.0',
            'scan_id': self._generate_scan_id(),
            'pages_scanned': 0,
            'total_requests': 0
        }
    
    def add_vulnerability(self, vulnerability: Dict[str, Any]) -> None:
        """Add a vulnerability to the report"""
        # Ensure vulnerability has required fields
        required_fields = ['type', 'url', 'confidence', 'severity']
        for field in required_fields:
            if field not in vulnerability:
                vulnerability[field] = 'unknown'
        
        self.vulnerabilities.append(vulnerability)
    
    def finalize_scan(self, pages_scanned: int = 0, total_requests: int = 0) -> None:
        """Finalize the scan report"""
        self.end_time = datetime.now()
        self.scan_metadata.update({
            'pages_scanned': pages_scanned,
            'total_requests': total_requests,
            'scan_duration': (self.end_time - self.start_time).total_seconds()
        })
    
    def get_summary(self) -> Dict[str, Any]:
        """Get scan summary statistics"""
        if not self.vulnerabilities:
            return {
                'total_vulnerabilities': 0,
                'by_severity': {},
                'by_type': {},
                'high_confidence_count': 0,
                'scan_metadata': self.scan_metadata
            }
        
        # Group by severity
        by_severity = defaultdict(int)
        by_type = defaultdict(int)
        high_confidence_count = 0
        
        for vuln in self.vulnerabilities:
            severity = vuln.get('severity', 'unknown')
            vuln_type = vuln.get('type', 'unknown')
            confidence = float(vuln.get('confidence', 0))
            
            by_severity[severity] += 1
            by_type[vuln_type] += 1
            
            if confidence >= 0.7:
                high_confidence_count += 1
        
        return {
            'total_vulnerabilities': len(self.vulnerabilities),
            'by_severity': dict(by_severity),
            'by_type': dict(by_type),
            'high_confidence_count': high_confidence_count,
            'scan_metadata': self.scan_metadata
        }
    
    def get_vulnerabilities_by_severity(self, min_severity: str = None) -> List[Dict[str, Any]]:
        """Get vulnerabilities filtered by minimum severity"""
        severity_levels = {'low': 1, 'medium': 2, 'high': 3, 'critical': 4}
        
        if not min_severity:
            return self.vulnerabilities
        
        min_level = severity_levels.get(min_severity.lower(), 0)
        filtered = []
        
        for vuln in self.vulnerabilities:
            vuln_level = severity_levels.get(vuln.get('severity', '').lower(), 0)
            if vuln_level >= min_level:
                filtered.append(vuln)
        
        return filtered
    
    def _generate_scan_id(self) -> str:
        """Generate unique scan ID"""
        import hashlib
        import uuid
        
        unique_string = f"{datetime.now().isoformat()}{uuid.uuid4()}"
        return hashlib.md5(unique_string.encode()).hexdigest()[:12]
